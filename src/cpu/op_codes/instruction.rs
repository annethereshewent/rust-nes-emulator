use strum_macros::Display;
use std::fmt;

#[derive(Display)]
pub enum Opname {
  ADC,
  AHX,
  ALR,
  ANC,
  AND,
  ARR,
  ASL,
  AXS,
  BCC,
  BCS,
  BEQ,
  BIT,
  BMI,
  BNE,
  BPL,
  BRK,
  BVC,
  BVS,
  CLC,
  CLD,
  CLI,
  CLV,
  CMP,
  CPX,
  CPY,
  DCP,
  DEC,
  DEX,
  DEY,
  EOR,
  IGN,
  INC,
  INX,
  INY,
  ISC,
  JMP,
  JSR,
  LAS,
  LAX,
  LDA,
  LDX,
  LDY,
  LSR,
  NOP,
  ORA,
  PHA,
  PHP,
  PLA,
  PLP,
  RLA,
  ROL,
  ROR,
  RRA,
  RTI,
  RTS,
  SAX,
  SBC,
  SEC,
  SED,
  SEI,
  SKB,
  SLO,
  SRE,
  STA,
  STX,
  STY,
  SXA,
  SYA,
  TAS,
  TAX,
  TAY,
  TSX,
  TXA,
  TXS,
  TYA,
  XAA,
  XXX,
}

pub enum AddressingMode {
  Immediate,
  ZeroPage,
  ZeroPageX,
  ZeroPageY,
  Absolute,
  AbsoluteX,
  AbsoluteY,
  Indirect,
  IndirectX,
  IndirectY,
  NoneAddressing,
  Accumulator
}

impl fmt::Display for AddressingMode {
  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    match self {
      AddressingMode::Immediate => write!(f, "immediate"),
      AddressingMode::ZeroPage => write!(f, "zero page"),
      AddressingMode::ZeroPageX => write!(f, "zero page x"),
      AddressingMode::ZeroPageY => write!(f, "zero page y"),
      AddressingMode::Absolute => write!(f, "absolute"),
      AddressingMode::AbsoluteX => write!(f, "absolute x"),
      AddressingMode::AbsoluteY => write!(f, "absolute y"),
      AddressingMode::Indirect => write!(f, "indirect"),
      AddressingMode::IndirectX => write!(f, "indirect x"),
      AddressingMode::IndirectY => write!(f, "indirect y"),
      AddressingMode::NoneAddressing => write!(f, "none"),
      AddressingMode::Accumulator => write!(f, "accumulator")
    }
  }
}